App for Startup:
  Tabulates feedback results from customer emails.
  (Business uses results to improve app/service).

Workflow:
  User signs up via Google OAuth
  User pays for email credits via Stripe
  User creates a new campaign/survey
  User enters list of emails to send survey to
  Email is sent to surveyed customers
  Survey participants click on link in email to provide feedback
  Feedback is tabulated
  Report of all survey responses generated

Inside of node get common js modules, on the front end like React can
use ES 2015 modules so have expanded access to other syntax

Passport
Passport - General helpers for handling auth in Express apps
  Passport Strategy - To implement auth flow with a provider email/pass,
  Google, Facebook, LinkedIn, Twitter etc
Google Developer console create client ID/credentials for Google+ API,
OAuth is buried there.
Create first ID for dev/localhost, second for real deploy
  authorized Javascript origins (dev) http://localhost:3000
  authorized redirect (Dev) http://localhost:3000/auth/google/callback

Client ID 1078364790644-nh2bap4jskshd26iu9fo89smgr06v7rv.apps.googleusercontent.com   (public token)
Client Secret gREKIlCxxLrjZ0x1m8I4PrWm  (do not share)


1. Users logs in with Google
  localhost:5000/auth/google

2. Forward user request to Google
  google.com/auth?appId=123

3. User grants permission to Google
  localhost:5000/auth/google/callback?code=456

4. Put user on hold, take code from URL

5. Send request to Google with the code included

6. Google sees the code in the URL, replies with details about the users

7. Get user details, create new record in MongoDB

8. Cookie-based re-entry


----

https://accounts.google.com/o/oauth2/v2/auth?response_type=code&
redirect_uri=http%3A%2F%2Flocalhost%3A3000%2Fauth%2Fgoogle%2Fcallback&
scope=profile%20email&
client_id=XXXXXXXXXXXXXXX-nh2bap4jskshd26iu9fo89smgr06v7rv.apps.googleusercontent.com

URI Mismatch above so it is difficult to get OAuth info from wrong redirect URI
need to authorize redirect URI with Google ahead of time


We are using cookie-based authentication because HTTP is stateless. Needs the cookie or token to be able to
remember access in between logins.

Cookie back from the Google server in the header we get a token. Browser automatically strips off the token from the response, stores,
and appends the token to any follow up requests. Browser includes cookie in follow-up requests.

Profile token : {"id":"XXXXXXXXXXXXXXX",
This id back from Google stays the same. We can compare in OAuth flow with unique identifier token.

-----
Mongoose
A Model Class represents a single collection in MongoDB, records are model instances
Using Mongo hosted in mLab
After provision an instance, can instruct Mongoose to connect via the standard MongoDB URI
Need to update username and password in URI in config file

Then have to serializeUser with the token, set a cookie.
Cookie/token gets automatically added to request for server. Passport can identify.
When logout, deserializeUser.

OAuth allows someone to sign in. After that, the user record has an internal ID that is used.

After cookie-session extracts user id for passport. Is deserialized turned into an id,
user model instance added to req object as 'req.user'
